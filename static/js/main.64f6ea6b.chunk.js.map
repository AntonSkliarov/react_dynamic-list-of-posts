{"version":3,"sources":["components/Loader/Loader.jsx","api/api.js","api/posts.js","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/Comment/Comment.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["Loader","className","BASE_URL","getUserPosts","userId","a","fetch","response","json","userPosts","Number","data","filteredPosts","filter","post","getPostDetails","postId","result","PostsList","seletedUserId","setPostId","selectedPostId","useState","posts","setPosts","loader","setLoader","useEffect","requestedPosts","fetchData","setButtonStatus","useCallback","current","map","key","id","body","type","onClick","getPostComments","postComments","filteredComments","comment","deleteCommentFromServer","commentId","method","ok","addCommentToServer","newComment","headers","JSON","stringify","addedComment","NewCommentForm","onAdd","name","setName","email","setEmail","setBody","addCommentError","setAddCommentError","addName","event","target","value","addEmail","addBody","resetFormFields","addComment","preventDefault","prevComments","onSubmit","placeholder","onChange","defaultProps","Comment","commentBody","removeComment","commentErrorId","PostDetails","setPost","comments","setComments","hiddenComments","setHiddenComments","setCommentErrorId","requestedPost","requestedComment","commentsVisibility","currentHiddenComments","commentIdForRemove","length","App","setSeletedUserId","selectUser","users","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64f6ea6b.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport async function getUserPosts(userId) {\n  const response = await fetch(`${BASE_URL}/posts/`);\n  const userPosts = await response.json();\n\n  if (Number(userId) === 0) {\n    return userPosts.data;\n  }\n\n  const filteredPosts = userPosts.data.filter(post => (\n    post.userId === Number(userId)\n  ));\n\n  return filteredPosts;\n}\n\nexport async function getPostDetails(postId) {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n  const result = await response.json();\n\n  return result.data;\n}\n","import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\nimport { Loader } from '../Loader/Loader';\nimport { getUserPosts } from '../../api/posts';\n\nexport function PostsList({ seletedUserId, setPostId, selectedPostId }) {\n  const [posts, setPosts] = useState([]);\n  const [loader, setLoader] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      const requestedPosts = await getUserPosts(seletedUserId);\n\n      setPosts(requestedPosts);\n    }\n\n    fetchData();\n    setLoader(false);\n  }, [seletedUserId]);\n\n  const setButtonStatus = useCallback((postId) => {\n    setPostId(current => (\n      current === postId\n        ? ''\n        : postId\n    ));\n  }, [setPostId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {loader\n        ? <Loader />\n        : (\n          <ul className=\"PostsList__list\">\n            {posts.map(post => (\n              <li\n                className=\"PostsList__item\"\n                key={post.id}\n              >\n                <div>\n                  <b>{`[User #${post.userId}]: `}</b>\n                  {post.body}\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => setButtonStatus(post.id)}\n                >\n                  {selectedPostId === post.id ? `Close` : `Open`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        )}\n    </div>\n  );\n}\n\nPostsList.propTypes = {\n  seletedUserId: PropTypes.number.isRequired,\n  setPostId: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport async function getPostComments(postId) {\n  const response = await fetch(`${BASE_URL}/comments`);\n  const postComments = await response.json();\n\n  const filteredComments = postComments.data.filter(comment => (\n    comment.postId === postId\n  ));\n\n  return filteredComments;\n}\n\nexport async function deleteCommentFromServer(commentId) {\n  const response = await fetch(\n    `${BASE_URL}/comments/${commentId}`,\n    { method: 'DELETE' },\n  );\n\n  if (!response.ok) {\n    return 'Error';\n  }\n\n  const result = await response.json();\n\n  return result.data;\n}\n\nexport async function addCommentToServer(newComment) {\n  const response = await fetch(`${BASE_URL}/comments/`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n\n  if (!response.ok) {\n    return 'Error';\n  }\n\n  const addedComment = await response.json();\n\n  return addedComment.data;\n}\n","import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\nimport { addCommentToServer } from '../../api/comments';\n\nexport function NewCommentForm({ onAdd, postId }) {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [addCommentError, setAddCommentError] = useState('');\n\n  const addName = useCallback((event) => {\n    setName(event.target.value);\n  }, []);\n\n  const addEmail = useCallback((event) => {\n    setEmail(event.target.value);\n  }, []);\n\n  const addBody = useCallback((event) => {\n    setBody(event.target.value);\n  }, []);\n\n  const resetFormFields = useCallback(() => {\n    setName('');\n    setEmail('');\n    setBody('');\n  }, []);\n\n  const addComment = useCallback(async(event) => {\n    event.preventDefault();\n\n    if (!name || !email || !body) {\n      return;\n    }\n\n    const newComment = {\n      name,\n      email,\n      body,\n      postId,\n    };\n    const addedComment = await addCommentToServer(newComment);\n\n    if (addedComment === 'Error') {\n      setAddCommentError('Error');\n\n      return;\n    }\n\n    onAdd(prevComments => [...prevComments, addedComment]);\n\n    resetFormFields();\n  }, [body, email, name, onAdd, postId, resetFormFields]);\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={addComment}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={addName}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={addEmail}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={addBody}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n      {addCommentError\n        && (\n          <p className=\"errorText\">\n            Something goes wrong, cannot add a new comment. Try again later.\n          </p>\n        )}\n    </form>\n  );\n}\n\nNewCommentForm.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n  postId: PropTypes.number,\n};\n\nNewCommentForm.defaultProps = {\n  postId: 0,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Comment = ({\n  commentId,\n  commentBody,\n  removeComment,\n  commentErrorId,\n}) => (\n  <>\n    <li className=\"PostDetails__list-item\" key={commentId}>\n      <button\n        type=\"button\"\n        className=\"PostDetails__remove-button button\"\n        onClick={() => removeComment(commentId)}\n      >\n        X\n      </button>\n      <p>{commentBody}</p>\n    </li>\n\n    {commentErrorId === commentId\n      && (\n        <p className=\"errorText\">\n          Something goes wrong, cannot delete comment. Try again later.\n        </p>\n      )}\n  </>\n);\n\nComment.propTypes = {\n  commentId: PropTypes.number.isRequired,\n  commentBody: PropTypes.string.isRequired,\n  removeComment: PropTypes.func.isRequired,\n  commentErrorId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { getPostComments, deleteCommentFromServer } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { Loader } from '../Loader/Loader';\nimport { Comment } from '../Comment';\n\nexport function PostDetails({ selectedPostId }) {\n  const [post, setPost] = useState({});\n  const [comments, setComments] = useState([]);\n  const [hiddenComments, setHiddenComments] = useState(true);\n  const [loader, setLoader] = useState(true);\n  const [commentErrorId, setCommentErrorId] = useState(0);\n\n  useEffect(() => {\n    async function fetchData() {\n      const requestedPost = await getPostDetails(selectedPostId);\n\n      setPost(requestedPost);\n    }\n\n    fetchData();\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const requestedComment = await getPostComments(post.id);\n\n      setComments(requestedComment);\n    }\n\n    fetchData();\n    setLoader(false);\n  }, [post.id]);\n\n  const commentsVisibility = useCallback(() => {\n    setHiddenComments(currentHiddenComments => !currentHiddenComments);\n  }, []);\n\n  const removeComment = useCallback(async(commentIdForRemove) => {\n    const response = await deleteCommentFromServer(commentIdForRemove);\n\n    if (response === 'Error') {\n      setCommentErrorId(commentIdForRemove);\n\n      return;\n    }\n\n    const filteredComments = comments.filter(comment => (\n      comment.id !== commentIdForRemove\n    ));\n\n    setComments(filteredComments);\n  }, [comments]);\n\n  return (\n    <>\n      {loader\n        ? <Loader />\n        : (\n          <div className=\"PostDetails App__PostDetails\">\n            <h2>Post details:</h2>\n\n            <section className=\"PostDetails__post\">\n              <p>{post.body}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              {comments.length === 0\n                ? <p className=\"PostDetails__noCommentsMessage\">No comments</p>\n                : (\n                  <>\n                    <button\n                      type=\"button\"\n                      className=\"button PostDetails__showCommentsButton\"\n                      onClick={commentsVisibility}\n                    >\n                      {hiddenComments\n                        ? `Show ${comments.length} comment(s)`\n                        : `Hide ${comments.length} comment(s)`\n                      }\n                    </button>\n\n                    {!hiddenComments && (\n                      <ul className=\"PostDetails__list\">\n                        {comments.map(comment => (\n                          <Comment\n                            key={comment.id}\n                            commentErrorId={commentErrorId}\n                            commentId={comment.id}\n                            commentBody={comment.body}\n                            removeComment={removeComment}\n                          />\n                        ))}\n                      </ul>\n                    )}\n                  </>\n                )}\n            </section>\n\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm\n                  onAdd={setComments}\n                  postId={post.id}\n                />\n              </div>\n            </section>\n          </div>\n        )}\n    </>\n  );\n}\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport data from './api/users.json';\n\nfunction App() {\n  const [seletedUserId, setSeletedUserId] = useState(0);\n  const [selectedPostId, setPostId] = useState(0);\n\n  const selectUser = useCallback(event => (\n    setSeletedUserId(event.target.value)\n  ), []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={selectUser}\n          >\n            <option value=\"0\">All users</option>\n            {data.users.map(user => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            seletedUserId={Number(seletedUserId)}\n            setPostId={setPostId}\n            selectedPostId={Number(selectedPostId)}\n          />\n        </div>\n\n        {!!selectedPostId\n          && (\n            <div className=\"App__content\">\n              <PostDetails selectedPostId={Number(selectedPostId)} />\n            </div>\n          )}\n\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}