{"version":3,"sources":["components/PostsList/PostsList.jsx","api/api.js","api/comments.js","api/posts.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["PostsList","posts","setPostId","selectedPostId","className","map","post","key","id","userId","body","type","onClick","postId","current","BASE_URL","getPostComments","a","fetch","response","json","result","filteredComments","data","filter","comment","commentId","method","newComment","headers","JSON","stringify","status","console","log","getUserPosts","Number","filteredPosts","getPostDetails","NewCommentForm","setOpenComments","openPostId","useState","commentName","setCommentName","commentEmail","setCommentEmail","commentBody","setCommentBody","onSubmit","event","preventDefault","prevComments","name","email","uuidv4","addCommentToServer","placeholder","value","onChange","target","PostDetails","openPost","setOpenPost","openComments","hiddenComments","setHiddenComments","useEffect","requestedPost","fetchData","requestedComment","removeComment","commentIdForRemove","deleteComment","length","currentHiddenComments","App","seletedUser","setSeletedUser","setPosts","requestedPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.99dc464c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport function PostsList({ posts, setPostId, selectedPostId }) {\n  const buttonStatus = (postId) => {\n    setPostId((current) => {\n      if (current === postId) {\n        return '';\n      }\n\n      return postId;\n    });\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.body}\n            </div>\n            <button\n              type=\"button\"\n              // value={post.id}\n              className=\"PostsList__button button\"\n              onClick={() => buttonStatus(post.id)}\n            >\n              {selectedPostId === post.id ? `Close` : `Open`}\n            </button>\n          </li>\n        ))}\n\n        {/* <li className=\"PostsList__item\">\n          <div>\n            <b>[User #1]: </b>\n            sunt aut facere repellat provident occaecati excepturi optio\n          </div>\n          <button\n            type=\"button\"\n            className=\"PostsList__button button\"\n          >\n            Close\n          </button>\n        </li>\n\n        <li className=\"PostsList__item\">\n          <div>\n            <b>[User #2]: </b>\n            et ea vero quia laudantium autem\n          </div>\n\n          <button\n            type=\"button\"\n            className=\"PostsList__button button\"\n          >\n            Open\n          </button>\n        </li> */}\n      </ul>\n    </div>\n  );\n}\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      body: PropTypes.string.isRequired,\n      userId: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n  setPostId: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport async function getPostComments(postId) {\n  const response = await fetch(`${BASE_URL}/comments`);\n  const result = await response.json();\n\n  const filteredComments = result.data.filter(comment => (\n    comment.postId === postId));\n\n  return filteredComments;\n}\n\nexport async function deleteComment(commentId) {\n  const response = await fetch(`${BASE_URL}/comments/${commentId}`,\n    { method: 'DELETE' });\n  const result = await response.json();\n\n  return result.data;\n}\n\nexport async function addCommentToServer(newComment) {\n  const response = await fetch(`${BASE_URL}/comments/`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n  const status = await response.json();\n\n  console.log(status);\n}\n","import { BASE_URL } from './api';\n\nexport async function getUserPosts(userId) {\n  const response = await fetch(`${BASE_URL}/posts/`);\n  const result = await response.json();\n\n  if (Number(userId) === 0) {\n    return result.data;\n  }\n\n  const filteredPosts = result.data.filter(post => (\n    post.userId === Number(userId)));\n\n  return filteredPosts;\n}\n\nexport async function getPostDetails(postId) {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n  const result = await response.json();\n\n  return result.data;\n}\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { v4 as uuidv4 } from 'uuid';\nimport { addCommentToServer } from '../../api/comments';\n\nexport function NewCommentForm({ setOpenComments, openPostId }) {\n  const [commentName, setCommentName] = useState('');\n  const [commentEmail, setCommentEmail] = useState('');\n  const [commentBody, setCommentBody] = useState('');\n\n  const addComment = (event) => {\n    event.preventDefault();\n\n    setOpenComments((prevComments) => {\n      const newComment = {\n        name: commentName,\n        email: commentEmail,\n        body: commentBody,\n        postId: openPostId,\n        id: uuidv4(),\n        // TO DO id generator\n      };\n\n      setCommentName('');\n      setCommentEmail('');\n      setCommentBody('');\n      addCommentToServer(newComment);\n\n      return [...prevComments, newComment];\n    });\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={addComment}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={commentName}\n          onChange={event => setCommentName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={commentEmail}\n          onChange={event => setCommentEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={commentBody}\n          onChange={event => setCommentBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getPostComments, deleteComment } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport function PostDetails({ selectedPostId }) {\n  const [openPost, setOpenPost] = useState({});\n  const [openComments, setOpenComments] = useState([]);\n  const [hiddenComments, setHiddenComments] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      const requestedPost = await getPostDetails(selectedPostId);\n\n      setOpenPost(requestedPost);\n    }\n\n    fetchData();\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const requestedComment = await getPostComments(openPost.id);\n\n      setOpenComments(requestedComment);\n    }\n\n    fetchData();\n  }, [openPost.id]);\n\n  const commentsVisibility = () => {\n    setHiddenComments(currentHiddenComments => !currentHiddenComments);\n  };\n\n  const removeComment = (commentIdForRemove) => {\n    const filteredComments = openComments.filter(comment => (\n      comment.id !== commentIdForRemove\n    ));\n\n    setOpenComments(filteredComments);\n    deleteComment(commentIdForRemove);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{openPost.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {openComments.length === 0\n          ? <p>No comments</p>\n          : (\n            <>\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={commentsVisibility}\n              >\n                {hiddenComments\n                  ? `Show ${openComments.length} comment(s)`\n                  : `Hide ${openComments.length} comment(s)`\n                }\n              </button>\n\n              {!hiddenComments && (\n                <ul className=\"PostDetails__list\">\n                  {openComments.map(comment => (\n                    <li className=\"PostDetails__list-item\" key={comment.id}>\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => removeComment(comment.id)}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </>\n          )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            setOpenComments={setOpenComments}\n            openPostId={openPost.id}\n          />\n        </div>\n      </section>\n    </div>\n  );\n}\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\n\nfunction App() {\n  const [seletedUser, setSeletedUser] = useState(0);\n  const [posts, setPosts] = useState([]);\n  const [selectedPostId, setPostId] = useState('');\n\n  useEffect(() => {\n    async function fetchData() {\n      const requestedPosts = await getUserPosts(seletedUser);\n\n      setPosts(requestedPosts);\n    }\n\n    fetchData();\n  }, [seletedUser]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={event => setSeletedUser(event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            setPostId={setPostId}\n            selectedPostId={Number(selectedPostId)}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            && <PostDetails selectedPostId={Number(selectedPostId)} />}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}