{"version":3,"sources":["components/Loader/Loader.jsx","api/api.js","api/posts.js","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/Comment/Comment.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["Loader","className","BASE_URL","getUserPosts","userId","a","fetch","response","json","userPosts","Number","data","filteredPosts","filter","post","getPostDetails","postId","result","PostsList","seletedUser","setPostId","selectedPostId","useState","posts","setPosts","loader","setLoader","useEffect","requestedPosts","fetchData","map","key","id","body","type","onClick","current","getPostComments","postComments","filteredComments","comment","deleteCommentFromServer","commentId","method","ok","addCommentToServer","newComment","headers","JSON","stringify","addedComment","NewCommentForm","onAdd","name","setName","email","setEmail","setBody","addCommentError","setAddCommentError","addComment","event","preventDefault","prevComments","onSubmit","placeholder","value","onChange","target","defaultProps","Comment","commentBody","removeComment","commentErrorId","PostDetails","openPost","setOpenPost","openComments","setOpenComments","hiddenComments","setHiddenComments","setCommentErrorId","requestedPost","requestedComment","commentIdForRemove","length","currentHiddenComments","App","setSeletedUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c29e3e1.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport async function getUserPosts(userId) {\n  const response = await fetch(`${BASE_URL}/posts/`);\n  const userPosts = await response.json();\n\n  if (Number(userId) === 0) {\n    return userPosts.data;\n  }\n\n  const filteredPosts = userPosts.data.filter(post => (\n    post.userId === Number(userId)));\n\n  return filteredPosts;\n}\n\nexport async function getPostDetails(postId) {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n  const result = await response.json();\n\n  return result.data;\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\nimport { Loader } from '../Loader/Loader';\nimport { getUserPosts } from '../../api/posts';\n\nexport function PostsList({ seletedUser, setPostId, selectedPostId }) {\n  const [posts, setPosts] = useState([]);\n  const [loader, setLoader] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      const requestedPosts = await getUserPosts(seletedUser);\n\n      setPosts(requestedPosts);\n    }\n\n    fetchData();\n    setLoader(false);\n  }, [seletedUser]);\n\n  const buttonStatus = (postId) => {\n    setPostId(current => (\n      current === postId\n        ? ''\n        : postId\n    ));\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {loader\n        ? <Loader />\n        : (\n          <ul className=\"PostsList__list\">\n            {posts.map(post => (\n              <li\n                className=\"PostsList__item\"\n                key={post.id}\n              >\n                <div>\n                  <b>{`[User #${post.userId}]: `}</b>\n                  {post.body}\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => buttonStatus(post.id)}\n                >\n                  {selectedPostId === post.id ? `Close` : `Open`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        )}\n    </div>\n  );\n}\n\nPostsList.propTypes = {\n  seletedUser: PropTypes.number.isRequired,\n  setPostId: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport async function getPostComments(postId) {\n  const response = await fetch(`${BASE_URL}/comments`);\n  const postComments = await response.json();\n\n  const filteredComments = postComments.data.filter(comment => (\n    comment.postId === postId));\n\n  return filteredComments;\n}\n\nexport async function deleteCommentFromServer(commentId) {\n  const response = await fetch(`${BASE_URL}/comments/${commentId}`,\n    { method: 'DELETE' });\n\n  if (!response.ok) {\n    return 'Error';\n  }\n\n  const result = await response.json();\n\n  return result.data;\n}\n\nexport async function addCommentToServer(newComment) {\n  const response = await fetch(`${BASE_URL}/comments/`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n\n  if (!response.ok) {\n    return 'Error';\n  }\n\n  const addedComment = await response.json();\n\n  return addedComment.data;\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\nimport { addCommentToServer } from '../../api/comments';\n\nexport function NewCommentForm({ onAdd, postId }) {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [addCommentError, setAddCommentError] = useState('');\n\n  const addComment = async(event) => {\n    event.preventDefault();\n\n    if (!name || !email || !body) {\n      return;\n    }\n\n    const newComment = {\n      name,\n      email,\n      body,\n      postId,\n    };\n    const addedComment = await addCommentToServer(newComment);\n\n    if (addedComment === 'Error') {\n      setAddCommentError('Error');\n\n      return;\n    }\n\n    onAdd(prevComments => [...prevComments, addedComment]);\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={addComment}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n      {addCommentError\n        && (\n          <p className=\"errorText\">\n            Something goes wrong, cannot add a new comment. Try again later.\n          </p>\n        )}\n    </form>\n  );\n}\n\nNewCommentForm.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n  postId: PropTypes.number,\n};\n\nNewCommentForm.defaultProps = {\n  postId: 0,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Comment = (\n  {\n    commentId,\n    commentBody,\n    removeComment,\n    commentErrorId,\n  },\n) => (\n  <>\n    <li className=\"PostDetails__list-item\" key={commentId}>\n      <button\n        type=\"button\"\n        className=\"PostDetails__remove-button button\"\n        onClick={() => removeComment(commentId)}\n      >\n        X\n      </button>\n      <p>{commentBody}</p>\n    </li>\n\n    {commentErrorId === commentId\n        && (\n          <p className=\"errorText\">\n            Something goes wrong, cannot delete comment. Try again later.\n          </p>\n        )}\n  </>\n);\n\nComment.propTypes = {\n  commentId: PropTypes.number.isRequired,\n  commentBody: PropTypes.string.isRequired,\n  removeComment: PropTypes.func.isRequired,\n  commentErrorId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getPostComments, deleteCommentFromServer } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { Loader } from '../Loader/Loader';\nimport { Comment } from '../Comment';\n\nexport function PostDetails({ selectedPostId }) {\n  const [openPost, setOpenPost] = useState({});\n  const [openComments, setOpenComments] = useState([]);\n  const [hiddenComments, setHiddenComments] = useState(true);\n  const [loader, setLoader] = useState(true);\n  const [commentErrorId, setCommentErrorId] = useState(0);\n\n  useEffect(() => {\n    async function fetchData() {\n      const requestedPost = await getPostDetails(selectedPostId);\n\n      setOpenPost(requestedPost);\n    }\n\n    fetchData();\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const requestedComment = await getPostComments(openPost.id);\n\n      setOpenComments(requestedComment);\n    }\n\n    fetchData();\n    setLoader(false);\n  }, [openPost.id]);\n\n  const commentsVisibility = () => {\n    setHiddenComments(currentHiddenComments => !currentHiddenComments);\n  };\n\n  const removeComment = async(commentIdForRemove) => {\n    const response = await deleteCommentFromServer(commentIdForRemove);\n\n    if (response === 'Error') {\n      setCommentErrorId(commentIdForRemove);\n\n      return;\n    }\n\n    const filteredComments = openComments.filter(comment => (\n      comment.id !== commentIdForRemove\n    ));\n\n    setOpenComments(filteredComments);\n  };\n\n  return (\n    <>\n      {loader\n        ? <Loader />\n        : (\n          <div className=\"PostDetails App__PostDetails\">\n            <h2>Post details:</h2>\n\n            <section className=\"PostDetails__post\">\n              <p>{openPost.body}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              {openComments.length === 0\n                ? <p className=\"PostDetails__noCommentsMessage\">No comments</p>\n                : (\n                  <>\n                    <button\n                      type=\"button\"\n                      className=\"button PostDetails__showCommentsButton\"\n                      onClick={commentsVisibility}\n                    >\n                      {hiddenComments\n                        ? `Show ${openComments.length} comment(s)`\n                        : `Hide ${openComments.length} comment(s)`\n                      }\n                    </button>\n\n                    {!hiddenComments && (\n                      <ul className=\"PostDetails__list\">\n                        {openComments.map(comment => (\n                          <Comment\n                            key={comment.id}\n                            commentErrorId={commentErrorId}\n                            commentId={comment.id}\n                            commentBody={comment.body}\n                            removeComment={removeComment}\n                          />\n                        ))}\n                      </ul>\n                    )}\n                  </>\n                )}\n            </section>\n\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm\n                  onAdd={setOpenComments}\n                  postId={openPost.id}\n                />\n              </div>\n            </section>\n          </div>\n        )}\n    </>\n  );\n}\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nfunction App() {\n  const [seletedUser, setSeletedUser] = useState(0);\n  const [selectedPostId, setPostId] = useState('');\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={event => setSeletedUser(event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            seletedUser={Number(seletedUser)}\n            setPostId={setPostId}\n            selectedPostId={Number(selectedPostId)}\n          />\n        </div>\n\n        {selectedPostId\n        && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={Number(selectedPostId)} />\n          </div>\n        )}\n\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}